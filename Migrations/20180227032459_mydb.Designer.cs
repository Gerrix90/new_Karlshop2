// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using new_Karlshop.Data;
using System;

namespace new_Karlshop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180227032459_mydb")]
    partial class mydb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("new_Karlshop.Data.Account", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("address");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.Property<string>("phone");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("new_Karlshop.Data.AccountGood", b =>
                {
                    b.Property<string>("Account_ID");

                    b.Property<int>("Goods_ID");

                    b.Property<int>("Order_ID");

                    b.Property<int>("Quantity");

                    b.Property<string>("Type");

                    b.Property<bool>("Viewed");

                    b.HasKey("Account_ID", "Goods_ID", "Order_ID");

                    b.HasIndex("Goods_ID");

                    b.ToTable("AccountGoods");
                });

            modelBuilder.Entity("new_Karlshop.Data.Category", b =>
                {
                    b.Property<int>("cat_id");

                    b.Property<string>("cat_name");

                    b.Property<string>("intro");

                    b.Property<int>("parent_id");

                    b.HasKey("cat_id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("new_Karlshop.Data.Comments", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("AccountGoodAccount_ID");

                    b.Property<int?>("AccountGoodGoods_ID");

                    b.Property<int?>("AccountGoodOrder_ID");

                    b.Property<string>("content");

                    b.Property<DateTime>("create_time");

                    b.Property<double>("rate_star");

                    b.HasKey("ID");

                    b.HasIndex("AccountGoodAccount_ID", "AccountGoodGoods_ID", "AccountGoodOrder_ID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("new_Karlshop.Data.Goods", b =>
                {
                    b.Property<int>("goods_id");

                    b.Property<string>("asin");

                    b.Property<int>("cat_id");

                    b.Property<string>("goods_brief");

                    b.Property<string>("goods_desc");

                    b.Property<string>("goods_name");

                    b.Property<int>("goods_quantity");

                    b.Property<string>("goods_sn");

                    b.Property<decimal>("goods_weight");

                    b.Property<bool>("is_delete");

                    b.Property<bool>("is_free_post");

                    b.Property<DateTime>("last_update");

                    b.Property<string>("market_price");

                    b.Property<string>("ori_img");

                    b.Property<string>("ori_img1");

                    b.Property<string>("ori_img2");

                    b.Property<string>("seller");

                    b.Property<decimal>("shop_price");

                    b.Property<int>("sold_quantity");

                    b.HasKey("goods_id");

                    b.HasIndex("cat_id");

                    b.ToTable("Goodses");
                });

            modelBuilder.Entity("new_Karlshop.Data.IPN", b =>
                {
                    b.Property<string>("transactionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("amount");

                    b.Property<string>("buyerEmail");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.Property<string>("paymentStatus");

                    b.Property<string>("txTime");

                    b.HasKey("transactionID");

                    b.ToTable("IPNs");
                });

            modelBuilder.Entity("new_Karlshop.Data.Order", b =>
                {
                    b.Property<int>("Order_id");

                    b.Property<string>("Account_ID");

                    b.Property<DateTime>("order_time");

                    b.Property<int>("total_number");

                    b.Property<decimal>("total_price");

                    b.HasKey("Order_id");

                    b.HasIndex("Account_ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("new_Karlshop.Data.OrderGoods", b =>
                {
                    b.Property<int>("Order_id");

                    b.Property<int>("goods_id");

                    b.Property<int>("Quantity");

                    b.HasKey("Order_id", "goods_id");

                    b.HasAlternateKey("goods_id", "Order_id");

                    b.ToTable("OrderGoods");
                });

            modelBuilder.Entity("new_Karlshop.Data.ViewedGoods", b =>
                {
                    b.Property<string>("Account_ID");

                    b.Property<int>("Goods_ID");

                    b.Property<int>("ViewedSequence");

                    b.HasKey("Account_ID", "Goods_ID");

                    b.HasIndex("Goods_ID");

                    b.ToTable("ViewedGoods");
                });

            modelBuilder.Entity("new_Karlshop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("new_Karlshop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("new_Karlshop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("new_Karlshop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("new_Karlshop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("new_Karlshop.Data.Account", b =>
                {
                    b.HasOne("new_Karlshop.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Account")
                        .HasForeignKey("new_Karlshop.Data.Account", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("new_Karlshop.Data.AccountGood", b =>
                {
                    b.HasOne("new_Karlshop.Data.Account", "Account")
                        .WithMany("AccountGood")
                        .HasForeignKey("Account_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("new_Karlshop.Data.Goods", "Goods")
                        .WithMany("AccountGood")
                        .HasForeignKey("Goods_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("new_Karlshop.Data.Comments", b =>
                {
                    b.HasOne("new_Karlshop.Data.AccountGood", "AccountGood")
                        .WithMany("Comments")
                        .HasForeignKey("AccountGoodAccount_ID", "AccountGoodGoods_ID", "AccountGoodOrder_ID");
                });

            modelBuilder.Entity("new_Karlshop.Data.Goods", b =>
                {
                    b.HasOne("new_Karlshop.Data.Category", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("cat_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("new_Karlshop.Data.Order", b =>
                {
                    b.HasOne("new_Karlshop.Data.Account", "Account")
                        .WithMany("Order")
                        .HasForeignKey("Account_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("new_Karlshop.Data.OrderGoods", b =>
                {
                    b.HasOne("new_Karlshop.Data.Order", "Order")
                        .WithMany("OrderGoods")
                        .HasForeignKey("Order_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("new_Karlshop.Data.Goods", "Goods")
                        .WithMany("OrderGoods")
                        .HasForeignKey("goods_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("new_Karlshop.Data.ViewedGoods", b =>
                {
                    b.HasOne("new_Karlshop.Data.Account", "Account")
                        .WithMany("ViewedGoods")
                        .HasForeignKey("Account_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("new_Karlshop.Data.Goods", "Goods")
                        .WithMany("ViewedGoods")
                        .HasForeignKey("Goods_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
